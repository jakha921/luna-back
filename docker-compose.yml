services:
  app:
    build: .
    ports:
      - "${APP_PORT}:8000"
    restart: on-failure
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  db:
    image: postgres:14.4-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "${POSTGRES_EXTERNAL_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
  cache:
    image: redis:7.0-alpine
    restart: always
    ports:
      - "${REDIS_EXTERNAL_PORT}:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD:-defaultpass}
    volumes:
      - cache:/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  cache:
    driver: local
