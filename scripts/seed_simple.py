#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
–ó–∞–ø—É—Å–∫: docker-compose exec app python scripts/seed_simple.py
"""

import asyncio
import random
import uuid
from datetime import datetime, timedelta
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ PYTHONPATH
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.db.session import get_session
from src.models.user import User
from src.models.transaction import Transaction
from src.models.withdrawal_queue import WithdrawalQueue
from src.schemas.user import SUserCreate

# –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
FIRST_NAMES = ["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–î–º–∏—Ç—Ä–∏–π", "–ú–∏—Ö–∞–∏–ª", "–ê–Ω–¥—Ä–µ–π", "–°–µ—Ä–≥–µ–π", "–í–ª–∞–¥–∏–º–∏—Ä", "–ê–ª–µ–∫—Å–µ–π", "–ê—Ä—Ç–µ–º", "–ò–≥–æ—Ä—å", "–†–æ–º–∞–Ω"]
LAST_NAMES = ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤", "–°–º–∏—Ä–Ω–æ–≤", "–ö—É–∑–Ω–µ—Ü–æ–≤", "–ü–æ–ø–æ–≤", "–í–∞—Å–∏–ª—å–µ–≤", "–°–æ–∫–æ–ª–æ–≤", "–ú–∏—Ö–∞–π–ª–æ–≤", "–ù–æ–≤–∏–∫–æ–≤"]
USERNAMES = ["alex", "dmitry", "mike", "andrey", "sergey", "vlad", "alexey", "artem", "igor", "roman"]

async def create_users(session, count=20):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ referral_code"""
    users = []
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    for i in range(count):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π referral_code
        referral_code = str(uuid.uuid4())[:8]
        
        user_data = {
            "telegram_id": 200000000 + i,
            "username": f"{random.choice(USERNAMES)}{i}",
            "firstname": random.choice(FIRST_NAMES),
            "lastname": random.choice(LAST_NAMES),
            "balance": random.randint(0, 1000000),
            "lang_code": random.choice(["ru", "en", "uz"]),
            "is_subscribed": random.choice([True, False]),
            "is_premium": random.choice([True, False]),
            "referral_code": referral_code,
            "invited_by": None
        }
        
        try:
            user_create = SUserCreate(**user_data)
            user = User(**user_create.model_dump())
            session.add(user)
            await session.flush()
            users.append(user)
            print(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.id})")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i}: {e}")
            continue
    
    await session.commit()
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    return users

async def create_transactions(session, users, count_per_user=5):
    """–°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–æ {count_per_user} –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)...")
    
    transaction_types = ["withdrawal", "referral_reward", "income"]
    
    for user in users:
        for _ in range(count_per_user):
            transaction = Transaction(
                user_id=user.id,
                amount=random.randint(100, 10000),
                type=random.choice(transaction_types),
                status=random.choice(["pending", "completed", "failed"]),
                timestamp=datetime.now() - timedelta(days=random.randint(0, 30))
            )
            session.add(transaction)
    
    await session.commit()
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(users) * count_per_user} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

async def create_withdrawals(session, users, count=30):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥"""
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ {count} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥...")
    
    for _ in range(count):
        user = random.choice(users)
        withdrawal = WithdrawalQueue(
            user_id=user.id,
            amount=random.randint(1000, 50000),
            wallet_address=f"EQ{random.randint(1000000000000000000, 9999999999999999999)}",
            status=random.choice(["pending", "processing", "completed", "failed"]),
            created_at=datetime.now() - timedelta(days=random.randint(0, 7))
        )
        session.add(withdrawal)
    
    await session.commit()
    print(f"–°–æ–∑–¥–∞–Ω–æ {count} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    session = await anext(get_session())
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await create_users(session, 20)
        
        if not users:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await create_transactions(session, users, 5)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥
        await create_withdrawals(session, users, 30)
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print(f"   üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(users) * 5}")
        print(f"   üè¶ –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥: 30")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        await session.close()

if __name__ == "__main__":
    asyncio.run(main())
